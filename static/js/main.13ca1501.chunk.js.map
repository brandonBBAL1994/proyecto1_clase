{"version":3,"sources":["Components/Principal/index.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Principal","search","useLocation","searchParams","URLSearchParams","turno","parseInt","get","estado","pos","x","y","arrayTablero","Array","z","w","arregloPosiblesMovimientos","posibleIndice","total","counterMovs","push","sort","a","b","colocar","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementsByTagName"],"mappings":"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","file":"static/js/main.13ca1501.chunk.js","sourcesContent":["import React from 'react'\nimport { useLocation } from 'react-router-dom'\n\nconst Principal = () => {\n\n    const { search } = useLocation()\n    const searchParams = new URLSearchParams(search)\n\n    const turno = parseInt(searchParams.get('turno'))\n    const estado= searchParams.get('estado')\n    \n    const casillaEnBlanco = 2\n    const fichaBlanca = 1\n    const fichaNegra = 0\n\n    const colocar = () => {\n        let pos = 0\n        let x = 0\n        let y = 0\n\n        let arrayTablero = new Array(8)\n        for(x = 0; x <= 7; x++){\n            arrayTablero[x] = new Array(8)\n            for(y = 0; y<=7; y++){\n                arrayTablero[x][y] = parseInt(estado[pos])\n                pos++\n            }\n        }\n        pos = 0\n        x = 0\n        y = 0\n\n        let z = 0\n        let w = 0\n        let arregloPosiblesMovimientos = []\n\n        for(x = 0; x <= 7; x++){\n            for(y = 0; y <= 7; y++){\n                if(arrayTablero[x][y] !== casillaEnBlanco) continue\n                let posibleIndice = {\n                    x: x,\n                    y: y,\n                    total: 0\n                }\n                let counterMovs = 0\n\n                if(turno === 0){//turno de fichas negras\n\n                    if(y > 0){//voy a revisar los valores de la izquierda\n                        z = y - 1\n                        counterMovs = 0\n                        \n                        while(z >= 0){\n                            if(arrayTablero[x][z] === casillaEnBlanco || arrayTablero[x][z] === fichaNegra) break\n                            if(arrayTablero[x][z] === fichaBlanca) counterMovs++\n                            z--\n                            if(arrayTablero[x][z] === fichaNegra) break\n                        }\n                        if(arrayTablero[x][z] === fichaNegra && counterMovs > 0){\n                            posibleIndice.total += counterMovs\n                            //console.log(posibleIndice)\n                        }\n                    }\n                    if(y <= 5){//voy a revisar los valores a la derecha\n                        z = y + 1\n                        counterMovs = 0\n                        while(z <= 7){\n                            if(arrayTablero[x][z] === casillaEnBlanco || arrayTablero[x][z] === fichaNegra) break\n                            if(arrayTablero[x][z] === fichaBlanca) counterMovs++\n                            z++\n                            if(arrayTablero[x][z] === fichaNegra) break\n                        }\n                        if(arrayTablero[x][z] === fichaNegra && counterMovs > 0){\n                            posibleIndice.total += counterMovs\n                            //console.log(posibleIndice)\n                            \n                        }\n                    }\n                    if(x >= 2){//voy a revisar hacia arriba\n                        z = x - 1\n                        counterMovs = 0\n                        while(z >= 0){\n                            if(arrayTablero[z][y] === casillaEnBlanco || arrayTablero[x][z] === fichaNegra) break\n                            if(arrayTablero[z][y] === fichaBlanca) counterMovs++\n                            z--\n                            if(arrayTablero[z][y] === fichaNegra) break\n                        }\n                        if(arrayTablero[z][y] === fichaNegra && counterMovs > 0){\n                            posibleIndice.total += counterMovs\n                            //console.log(posibleIndice)\n                        }\n                    }\n                    if(x <= 5){//voy a revisar hacia abajo\n                        z = x + 1\n                        counterMovs = 0\n                        while(z <= 7){\n                            if(arrayTablero[z][y] === casillaEnBlanco || arrayTablero[z][y] === fichaNegra) break\n                            if(arrayTablero[z][y] === fichaBlanca) counterMovs++\n                            z++\n                            if(arrayTablero[z][y] === fichaNegra) break\n                        }\n                        if(arrayTablero[z][y] === fichaNegra && counterMovs > 0){\n                            posibleIndice.total += counterMovs\n                            //console.log(posibleIndice)\n                            \n                        }\n                    }\n\n                    /* REVISANDO EN DIAGONALES */\n\n                    //DIAGONAL DERECHA ARRIBA\n                    if(x >= 2 && y <= 5){\n                        z = x - 1\n                        w = y + 1\n                        counterMovs = 0\n                        while(z > 0 && w < 7){\n                            if(arrayTablero[z][w] === casillaEnBlanco || arrayTablero[z][w] === fichaNegra) break\n                            if(arrayTablero[z][w] === fichaBlanca) counterMovs++\n                            z--\n                            w++\n                            if(arrayTablero[z][w] === fichaNegra) break\n                        }\n                        if(arrayTablero[z][w] === fichaNegra && counterMovs > 0){\n                            posibleIndice.total += counterMovs\n                            //console.log(posibleIndice)\n                        }\n                    }\n\n                    //DIAGONAL DERECHA ABAJO\n                    if(x <= 5 && y <= 5){\n                        z = x + 1\n                        w = y + 1\n                        counterMovs = 0\n                        while(z < 7 && w < 7){\n                            if(arrayTablero[z][w] === casillaEnBlanco || arrayTablero[z][w] === fichaNegra) break\n                            if(arrayTablero[z][w] === fichaBlanca) counterMovs++\n                            z++\n                            w++\n                            if(arrayTablero[z][w] === fichaNegra) break\n                        }\n                        if(arrayTablero[z][w] === fichaNegra && counterMovs > 0){\n                            posibleIndice.total += counterMovs\n                            //console.log(posibleIndice)\n                        }\n                    }\n\n                    //DIAGONAL IZQUIERDA ARRIBA\n                    if(x >= 2 && y >= 2){\n                        z = x - 1\n                        w = y - 1\n                        counterMovs = 0\n                        while(z > 0 && w > 0){\n                            if(arrayTablero[z][w] === casillaEnBlanco || arrayTablero[z][w] === fichaNegra) break\n                            if(arrayTablero[z][w] === fichaBlanca) counterMovs++\n                            z--\n                            w--\n                            if(arrayTablero[z][w] === fichaNegra) break\n                        }\n                        if(arrayTablero[z][w] === fichaNegra && counterMovs > 0){\n                            posibleIndice.total += counterMovs\n                            //console.log(posibleIndice)\n                        }\n                    }\n\n                    //DIAGONAL IZQUIERDA ABAJO\n                    if(x <= 5 && y >= 2){\n                        z = x + 1\n                        w = y - 1\n                        counterMovs = 0\n                        while(z < 7 && w > 0){\n                            if(arrayTablero[z][w] === casillaEnBlanco || arrayTablero[z][w] === fichaNegra) break\n                            if(arrayTablero[z][w] === fichaBlanca) counterMovs++\n                            z++\n                            w--\n                            if(arrayTablero[z][w] === fichaNegra) break\n                        }\n                        if(arrayTablero[z][w] === fichaNegra && counterMovs > 0){\n                            posibleIndice.total += counterMovs\n                            //console.log(posibleIndice)\n                        }\n                    }\n\n\n\n                    \n                }else{//turno fichas blancas\n\n                    if (y > 0) {//voy a revisar los valores de la izquierda\n                        z = y - 1\n                        counterMovs = 0\n\n                        while (z >= 0) {\n                            if (arrayTablero[x][z] === casillaEnBlanco || arrayTablero[x][z] === fichaBlanca) break\n                            if (arrayTablero[x][z] === fichaNegra) counterMovs++\n                            z--\n                            if (arrayTablero[x][z] === fichaBlanca) break\n                        }\n                        if (arrayTablero[x][z] === fichaBlanca && counterMovs > 0) {\n                            posibleIndice.total += counterMovs\n                            //console.log(posibleIndice)\n\n                        }\n                    }\n                    if (y <= 5) {//voy a revisar los valores a la derecha\n                        z = y + 1\n                        counterMovs = 0\n                        while (z <= 7) {\n                            if (arrayTablero[x][z] === casillaEnBlanco || arrayTablero[x][z] === fichaBlanca) break\n                            if (arrayTablero[x][z] === fichaNegra) counterMovs++\n                            z++\n                            if (arrayTablero[x][z] === fichaBlanca) break\n                        }\n                        if (arrayTablero[x][z] === fichaBlanca && counterMovs > 0) {\n                            posibleIndice.total += counterMovs\n                            //console.log(posibleIndice)\n                        }\n                    }\n                    if (x >= 2) {//voy a revisar hacia arriba\n                        z = x - 1\n                        counterMovs = 0\n                        while (z >= 0) {\n                            if (arrayTablero[z][y] === casillaEnBlanco || arrayTablero[z][y] === fichaBlanca) break\n                            if (arrayTablero[z][y] === fichaNegra) counterMovs++\n                            z--\n                            if (arrayTablero[z][y] === fichaBlanca) break\n                        }\n                        if (arrayTablero[z][y] === fichaBlanca && counterMovs > 0) {\n                            posibleIndice.total += counterMovs\n                            //console.log(posibleIndice)\n                        }\n                    }\n                    if (x <= 5) {//voy a revisar hacia abajo\n                        z = x + 1\n                        counterMovs = 0\n                        while (z <= 7) {\n                            if (arrayTablero[z][y] === casillaEnBlanco || arrayTablero[z][y] === fichaBlanca) break\n                            if (arrayTablero[z][y] === fichaNegra) counterMovs++\n                            z++\n                            if (arrayTablero[z][y] === fichaBlanca) break\n                        }\n                        if (arrayTablero[z][y] === fichaBlanca && counterMovs > 0) {\n                            posibleIndice.total += counterMovs\n                            //console.log(posibleIndice)\n                        }\n                    }\n\n                    /* REVISANDO EN DIAGONALES */\n                    //DIAGONAL DERECHA ARRIBA\n                    if (x >= 2 && y <= 5) {\n                        z = x - 1\n                        w = y + 1\n                        counterMovs = 0\n                        while (z > 0 && w < 7) {\n                            if (arrayTablero[z][w] === casillaEnBlanco || arrayTablero[z][w] === fichaBlanca) break\n                            if (arrayTablero[z][w] === fichaNegra) counterMovs++\n                            z--\n                            w++\n                            if (arrayTablero[z][w] === fichaBlanca) break\n                        }\n                        if (arrayTablero[z][w] === fichaBlanca && counterMovs > 0) {\n                            posibleIndice.total += counterMovs\n                        }\n                    }\n\n                    //DIAGONAL DERECHA ABAJO\n                    if (x <= 5 && y <= 5) {\n                        z = x + 1\n                        w = y + 1\n                        counterMovs = 0\n                        while (z < 7 && w < 7) {\n                            if (arrayTablero[z][w] === casillaEnBlanco || arrayTablero[z][w] === fichaBlanca) break\n                            if (arrayTablero[z][w] === fichaNegra) counterMovs++\n                            z++\n                            w++\n                            if (arrayTablero[z][w] === fichaBlanca) break\n                        }\n                        if (arrayTablero[z][w] === fichaBlanca && counterMovs > 0) {\n                            posibleIndice.total += counterMovs\n                            //console.log(posibleIndice)\n                        }\n                    }\n\n                    //DIAGONAL IZQUIERDA ARRIBA\n                    if (x >= 2 && y >= 2) {\n                        z = x - 1\n                        w = y - 1\n                        counterMovs = 0\n                        while (z > 0 && w > 0) {\n                            if (arrayTablero[z][w] === casillaEnBlanco || arrayTablero[z][w] === fichaBlanca) break\n                            if (arrayTablero[z][w] === fichaNegra) counterMovs++\n                            z--\n                            w--\n                            if (arrayTablero[z][w] === fichaBlanca) break\n                        }\n                        if (arrayTablero[z][w] === fichaBlanca && counterMovs > 0) {\n                            posibleIndice.total += counterMovs\n                            //console.log(posibleIndice)\n                        }\n                    }\n\n                    //DIAGONAL IZQUIERDA ABAJO\n                    if (x <= 5 && y >= 2) {\n                        z = x + 1\n                        w = y - 1\n                        counterMovs = 0\n                        while (z < 7 && w > 0) {\n                            if (arrayTablero[z][w] === casillaEnBlanco || arrayTablero[z][w] === fichaBlanca) break\n                            if (arrayTablero[z][w] === fichaNegra) counterMovs++\n                            z++\n                            w--\n                            if (arrayTablero[z][w] === fichaBlanca) break\n                        }\n                        if (arrayTablero[z][w] === fichaBlanca && counterMovs > 0) {\n                            posibleIndice.total += counterMovs\n                            //console.log(posibleIndice)\n                        }\n                    }\n                }\n                if(posibleIndice.total > 0){\n                    arregloPosiblesMovimientos.push(posibleIndice)\n                }\n            }\n            \n        }\n\n        arregloPosiblesMovimientos.sort(function(a, b){\n            return b.total - a.total\n        })\n\n        return (arregloPosiblesMovimientos[0].x+''+arregloPosiblesMovimientos[0].y)\n\n    }\n\n    return ( <> { colocar() } </> )\n}\n\nexport default Principal\n","import React from 'react'\nimport Principal from './Components/Principal'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\nconst App = () => {\n\n  return (\n    <Router>\n      <Switch>\n        <Route>\n          <Principal/>\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementsByTagName('body')[0]\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}